import os


class ShiftBlock:
    def __init__(self, key=None):
        self.key = key or os.urandom(8)
        self.block_size = 8

    def _pad(self, data):
        """Add PKCS7 padding"""
        padding_length = self.block_size - (len(data) % self.block_size)
        return data + bytes([padding_length] * padding_length)

    def _unpad(self, data):
        """Remove padding"""
        padding_length = data[-1]
        return data[:-padding_length]

    def _mix_block(self, block):
        """Custom mixing function: shift and swap bytes"""
        mixed = bytearray(block)

        # Shift bytes to the left by 1 position
        mixed = mixed[1:] + mixed[:1]

        # Swap adjacent bytes (0-1, 2-3, 4-5, 6-7)
        for i in range(0, len(mixed) - 1, 2):
            mixed[i], mixed[i + 1] = mixed[i + 1], mixed[i]

        return bytes(mixed)

    def _unmix_block(self, block):
        """Reverse the mixing operation"""
        unmixed = bytearray(block)

        # Swap adjacent bytes back
        for i in range(0, len(unmixed) - 1, 2):
            unmixed[i], unmixed[i + 1] = unmixed[i + 1], unmixed[i]

        # Shift bytes to the right by 1 position
        unmixed = unmixed[-1:] + unmixed[:-1]

        return bytes(unmixed)

    def encrypt(self, plaintext):
        """Encrypt using custom block operations"""
        if isinstance(plaintext, str):
            plaintext = plaintext.encode()

        print(f"\n1. Original plaintext: {plaintext}")
        print(f"   Plaintext (hex): {plaintext.hex()}")

        # Step 1: Padding
        padded = self._pad(plaintext)
        print(f"\n2. After PKCS7 padding: {padded}")
        print(f"   Padded (hex): {padded.hex()}")

        ciphertext = b''
        block_count = len(padded) // self.block_size

        for i in range(0, len(padded), self.block_size):
            block = padded[i:i + self.block_size]
            block_num = i // self.block_size + 1

            print(f"\n--- Processing Block {block_num}/{block_count} ---")
            print(f"3. Block {block_num}: {block} (hex: {block.hex()})")

            # Step 2: XOR with key
            xored = bytes([b ^ k for b, k in zip(block, self.key)])
            print(f"4. After XOR with key: {xored} (hex: {xored.hex()})")
            print(f"   Key used: {self.key} (hex: {self.key.hex()})")

            # Step 3: Apply custom mixing
            mixed = self._mix_block(xored)
            print(f"5. After byte shift & swap: {mixed} (hex: {mixed.hex()})")

            ciphertext += mixed

        print(f"\n6. Final ciphertext: {ciphertext}")
        print(f"   Ciphertext (hex): {ciphertext.hex()}")
        return ciphertext

    def decrypt(self, ciphertext):
        """Decrypt by reversing operations"""
        print(f"\n--- DECRYPTION PROCESS ---")
        print(f"1. Ciphertext input: {ciphertext}")
        print(f"   Ciphertext (hex): {ciphertext.hex()}")

        plaintext = b''
        block_count = len(ciphertext) // self.block_size

        for i in range(0, len(ciphertext), self.block_size):
            block = ciphertext[i:i + self.block_size]
            block_num = i // self.block_size + 1

            print(f"\n--- Processing Block {block_num}/{block_count} ---")
            print(f"2. Block {block_num}: {block} (hex: {block.hex()})")

            # Step 1: Reverse mixing first
            unmixed = self._unmix_block(block)
            print(f"3. After reverse swap & shift: {unmixed} (hex: {unmixed.hex()})")

            # Step 2: XOR with key (same operation for decryption)
            xored = bytes([b ^ k for b, k in zip(unmixed, self.key)])
            print(f"4. After XOR with key: {xored} (hex: {xored.hex()})")
            print(f"   Key used: {self.key} (hex: {self.key.hex()})")

            plaintext += xored

        print(f"\n5. After block processing: {plaintext}")
        print(f"   (hex: {plaintext.hex()})")

        # Step 3: Remove padding
        unpadded = self._unpad(plaintext)
        print(f"6. After removing padding: {unpadded}")
        print(f"   (hex: {unpadded.hex()})")

        return unpadded


def demo_shift_block():
    print("=== ShiftBlock Cipher Demo ===")

    cipher = ShiftBlock(b"mykey123")
    message = "Hello World!"

    print(f"Original message: {message}")
    print(f"Key being used: {cipher.key} (hex: {cipher.key.hex()})")

    encrypted = cipher.encrypt(message)
    decrypted = cipher.decrypt(encrypted)

    print(f"\n=== FINAL RESULTS ===")
    print(f"Original: {message}")
    print(f"Decrypted: {decrypted.decode()}")

    # Verify
    success = decrypted.decode() == message
    print(f"âœ“ Success: {success}")

    return success


if __name__ == "__main__":
    demo_shift_block()
